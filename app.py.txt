import streamlit as st
import pickle
import numpy as np
import pandas as pd # D√πng ƒë·ªÉ hi·ªÉn th·ªã x√°c su·∫•t

# ==========================================================
# C·∫§U H√åNH C·ªêT L√ïI (C·∫¶N THAY ƒê·ªîI)
# ==========================================================
MODEL_PATH = 'random_forest_model.pkl'  # T√™n file m√¥ h√¨nh RF ƒë√£ l∆∞u
SCALER_PATH = 'scaler.pkl'            # T√™n file StandardScaler ƒë√£ l∆∞u
PCA_PATH = 'pca.pkl'                  # T√™n file PCA ƒë√£ l∆∞u

# T√™n c√°c l·ªõp g·∫°o (ƒê·∫£m b·∫£o th·ª© t·ª± n√†y kh·ªõp v·ªõi khi hu·∫•n luy·ªán)
CLASS_NAMES = [
    'G·∫°o Th·∫≠t (Class 1)', 'G·∫°o Th·∫≠t (Class 2)', 'G·∫°o Gi·∫£ (Plastic)', 'G·∫°o H·ªèng', '...' 
    # Thay th·∫ø b·∫±ng t√™n l·ªõp th·ª±c t·∫ø c·ªßa b·∫°n
]

# T√™n c√°c ƒë·∫∑c tr∆∞ng g·ªëc (PH·∫¢I KH·ªöP V·ªöI ƒê·∫∂C TR∆ØNG ƒê·∫¶U V√ÄO)
FEATURE_NAMES = [
    'Area', 'Perimeter', 'MajorAxisLength', 'MinorAxisLength', 
    'Eccentricity', 'ConvexArea', 'EquivalentDiameter'
    # Th√™m c√°c ƒë·∫∑c tr∆∞ng kh√°c b·∫°n ƒë√£ d√πng
]
DEFAULT_FEATURE_VALUES = [5000, 300, 10.5, 5.2, 0.85, 4900, 70.0] 
# ==========================================================

@st.cache_resource
def load_rf_components():
    """T·∫£i m√¥ h√¨nh Random Forest, Scaler v√† PCA t·ª´ file .pkl."""
    try:
        with open(MODEL_PATH, 'rb') as f:
            model = pickle.load(f)
        with open(SCALER_PATH, 'rb') as f:
            scaler = pickle.load(f)
        with open(PCA_PATH, 'rb') as f:
            pca = pickle.load(f)
        return model, scaler, pca
    except FileNotFoundError as e:
        st.error(f"L·ªói t·∫£i file: Vui l√≤ng ki·ªÉm tra c√°c file .pkl ({e.filename}) ƒë√£ ƒë∆∞·ª£c ƒë·∫©y l√™n GitHub ch∆∞a.")
        st.stop()
    except Exception as e:
        st.error(f"L·ªói t·∫£i m√¥ h√¨nh: {e}")
        st.stop()

def predict_features(input_data, model, scaler, pca, class_names):
    """Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫∑c tr∆∞ng v√† d·ª± ƒëo√°n."""
    try:
        # 1. Chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng numpy 2D (1 m·∫´u, N ƒë·∫∑c tr∆∞ng)
        features = np.array(input_data).reshape(1, -1)
        
        # 2. Ti·ªÅn x·ª≠ l√Ω (Ph·∫£i theo ƒë√∫ng th·ª© t·ª±: Scaling -> PCA)
        features_scaled = scaler.transform(features)
        features_pca = pca.transform(features_scaled)
        
        # 3. D·ª± ƒëo√°n x√°c su·∫•t
        predictions = model.predict_proba(features_pca)[0] # L·∫•y m·∫£ng x√°c su·∫•t 1D
        
        predicted_class_index = np.argmax(predictions)
        confidence = np.max(predictions)

        # L·∫•y top 3 d·ª± ƒëo√°n
        top_k_indices = np.argsort(predictions)[::-1][:3]
        top_k_results = [(class_names[i], predictions[i]) for i in top_k_indices]
        
        return class_names[predicted_class_index], confidence, top_k_results

    except ValueError as e:
        st.error(f"L·ªói ƒë·ªãnh d·∫°ng d·ªØ li·ªáu: {e}")
        return "L·ªói x·ª≠ l√Ω", 0.0, []
    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
        return "L·ªói x·ª≠ l√Ω", 0.0, []


# ==========================================================
# LOGIC ·ª®NG D·ª§NG CH√çNH
# ==========================================================
model, scaler, pca = load_rf_components()

st.set_page_config(page_title="Ph√¢n Lo·∫°i G·∫°o Random Forest", layout="centered")

st.title("üçö ·ª®ng D·ª•ng Ph√¢n Bi·ªát G·∫°o Th·∫≠t/Gi·∫£ (Random Forest)")
st.caption(f"S·ª≠ d·ª•ng {len(FEATURE_NAMES)} ƒë·∫∑c tr∆∞ng h√¨nh th√°i ƒë√£ qua PCA ƒë·ªÉ ph√¢n lo·∫°i.")

# -----------------
# 1. Giao di·ªán Nh·∫≠p li·ªáu (Sidebar)
# -----------------
with st.sidebar:
    st.header("1. Nh·∫≠p ƒê·∫∑c tr∆∞ng H·∫°t G·∫°o")
    st.info("S·ª≠ d·ª•ng c√°c thanh tr∆∞·ª£t b√™n d∆∞·ªõi ƒë·ªÉ nh·∫≠p c√°c ƒë·∫∑c tr∆∞ng h√¨nh th√°i c·ªßa h·∫°t g·∫°o m·ªõi.")
    
    input_data = []
    
    # T·∫°o √¥ nh·∫≠p li·ªáu cho t·ª´ng ƒë·∫∑c tr∆∞ng
    for i, feature in enumerate(FEATURE_NAMES):
        val = st.number_input(
            f"Nh·∫≠p {feature}:", 
            min_value=0.0, 
            value=DEFAULT_FEATURE_VALUES[i],
            step=0.1
        )
        input_data.append(val)

# -----------------
# 2. N√∫t D·ª± ƒëo√°n v√† Hi·ªÉn th·ªã K·∫øt qu·∫£
# -----------------
if st.sidebar.button('Ph√¢n Lo·∫°i H·∫°t G·∫°o', type="primary"):
    
    if len(input_data) != len(FEATURE_NAMES):
        st.error(f"Vui l√≤ng nh·∫≠p ƒë·ªß {len(FEATURE_NAMES)} ƒë·∫∑c tr∆∞ng!")
    else:
        with st.spinner('ƒêang ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v√† d·ª± ƒëo√°n...'):
            
            predicted_name, confidence, top_k_results = predict_features(
                input_data, model, scaler, pca, CLASS_NAMES
            )
            
            if predicted_name != "L·ªói x·ª≠ l√Ω":
                st.success(f"‚úÖ D·ª± ƒëo√°n Th√†nh C√¥ng!")
                st.markdown("---")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"**K·∫øt qu·∫£ Ph√¢n lo·∫°i:**")
                    st.markdown(f"<span style='color:green; font-size: 24px; font-weight: bold;'>{predicted_name}</span>", unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"**ƒê·ªô tin c·∫≠y:**")
                    st.markdown(f"<span style='color:red; font-size: 24px; font-weight: bold;'>{confidence:.2%}</span>", unsafe_allow_html=True)
                
                st.markdown("---")
                
                # HI·ªÇN TH·ªä C√ÅC K·∫æT QU·∫¢ X√ÅC SU·∫§T CAO KH√ÅC
                st.subheader("Ph√¢n t√≠ch X√°c su·∫•t Chi ti·∫øt:")
                
                prob_df = pd.DataFrame(top_k_results, columns=['Lo·∫°i G·∫°o', 'X√°c su·∫•t'])
                prob_df['X√°c su·∫•t'] = prob_df['X√°c su·∫•t'].apply(lambda x: f"{x:.2%}")
                
                st.dataframe(prob_df, hide_index=True)
                
st.info("Nh·∫≠p c√°c ƒë·∫∑c tr∆∞ng ·ªü thanh b√™n tr√°i v√† nh·∫•n n√∫t 'Ph√¢n Lo·∫°i H·∫°t G·∫°o' ƒë·ªÉ xem k·∫øt qu·∫£ d·ª± ƒëo√°n.")